#! /usr/bin/env bash
# ___________________________________________________________________________ #
#                                                                             #
#       TimeTravel -- A CLI tool for accessing time machine backups.          #
#                                                                             #
#                                                                             #
#    Licensed under the Apache License, Version 2.0 (the "License");          #
#    you may not use this file except in compliance with the License.         #
#    You may obtain a copy of the License at                                  #
#                                                                             #
#        http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                             #
#    Unless required by applicable law or agreed to in writing, software      #
#    distributed under the License is distributed on an "AS IS" BASIS,        #
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#    See the License for the specific language governing permissions and      #
#    limitations under the License.                                           #
# ___________________________________________________________________________ #
#                                                                             #
#                                                                             #
# Copyright 2012, lhunath                                                     #
#   * http://www.lhunath.com                                                  #
#   * Maarten Billemont                                                       #
#                                                                             #
source "${BASH_SOURCE%/*}/bashlib"
_logInfColor=$green 

TIMEMACHINE=${TIMEMACHINE:-/Volumes/MobileBackups/Backups.backupdb}
while getopts :H:T:D:lrdf opt; do
    case $opt in
        H) host=$OPTARG;;
        T) time=$OPTARG;;
        D) disk=$OPTARG;;
        l) mode=list;;
        r) mode=restore;;
        d) mode=diff;;
        f) force=1;;
    esac
done
shift $((OPTIND-1))
mode=${mode:-show}

file=${1:-.}
[[ $file = /* ]] || file=$PWD/$file

case $mode in
    list)
        inf 'Searching for file: %s' "$file"
        timeFiles=("$TIMEMACHINE/$host"*/"$time"*/"$disk"*"$file")
        if [[ -e $timeFiles ]]; then
            for timeFileInfo in "${timeFiles[@]/#"$TIMEMACHINE/"}"; do
                IFS=/ read -r timeFileHost timeFileTime timeFileDisk _ <<< "$timeFileInfo"
                inf 'Found backup of %s, disk %s, at %s: %s' "$timeFileHost" "$timeFileDisk" "$timeFileTime" "$timeFileInfo"
            done
        else
            wrn 'No backups found.'
        fi
        ;;
    show|diff|restore)
        host=${host:-$(scutil --get ComputerName | sed 's,Computer Name: ,,')}
        time=${time:-Latest}
        disk=${disk:-Macintosh HD}

        pinf 'Accessing backups of %s, disk %s, at %s.' "$host" "$disk" "$time"
            timePath=$TIMEMACHINE/$host/$time/$disk
            [[ -e $timePath ]]
        fnip || ftl 'Backups not found.' || exit

        timeFile=$timePath/$file
        [[ -e $timeFile ]] || ftl 'Restore failed, no backup found for: %s' "$file" || exit

        case $mode in
            show)
                inf 'Showing file: %s' "$file"
                if [[ -d $timeFile ]]; then
                    ls -al "$timeFile"
                else
                    if [[ -t 1 ]]; then
                        less "$timeFile"
                    else
                        cat "$timeFile"
                    fi
                fi
                ;;
            diff)
                inf 'Showing changes to file: %s' "$file"
                colordiff -urN "$timeFile" "$file" | less -R
                ;;
            restore)
                [[ ! -e $file ]] || (( force )) || ftl 'Restore failed, refusing to overwrite existing file (force with %s): %s' -f "$file" || exit

                inf 'Recovering file: %s' "$file"
                [[ -d $timeFile && $timeFile != */ ]] && timeFile+=/
                rsync -av "$timeFile" "$file" && inf 'Successfully recovered.' || err 'Recovery failed, file could not be copied: rsync exit code %d' "$?"
                ;;
        esac
        ;;
esac

