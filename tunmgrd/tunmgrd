#! /usr/bin/env bash
# ___________________________________________________________________________ #
#                                                                             #
#       TunMgrd -- A tunnel management daemon.                                #
#                                                                             #
#                                                                             #
#    Licensed under the Apache License, Version 2.0 (the "License");          #
#    you may not use this file except in compliance with the License.         #
#    You may obtain a copy of the License at                                  #
#                                                                             #
#        http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                             #
#    Unless required by applicable law or agreed to in writing, software      #
#    distributed under the License is distributed on an "AS IS" BASIS,        #
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#    See the License for the specific language governing permissions and      #
#    limitations under the License.                                           #
# ___________________________________________________________________________ #
#                                                                             #
#                                                                             #
# Copyright 2010, lhunath                                                     #
#   * http://www.lhunath.com                                                  #
#   * Maarten Billemont.                                                      #
#                                                                             #
source bashlib                                                                #

# Load and parse the tunnel configuration file.
cd
TMPDIR=${TMPDIR:-/tmp} TMPDIR=${TMPDIR%/}
_logVerbosity=2 logDir= config=()
source "$HOME/.tunmgrd.conf"
: ${logDir:=$TMPDIR}
[[ -t 1 ]]
: ${logColor:=$(( ! $? ))}
_logFile=$logDir/tunmgrd.log
_logColor=$logColor
for ((t=0; t < ${#config[@]}; ++t)); do
    read urls[t] modifiers[t] configs[t] <<< "${config[t]}"
done


# Output a brief description of the current configuration.
inf "Global configuration:"
inf '\t- PID:           %d' "$$"
inf '\t- Logging to:    %s' "$logDir"
inf
inf "Tunnels:"
for t in "${!urls[@]}"; do
    inf '\t- [%s]%s (%s)' "${modifiers[t]}" "${urls[t]}" "${configs[t]}"
done


# Output a status report on our tunnels.
showStatus() {
    local tstate tstatecol= t

    printf '%s\n' ---
    for t in "${!name[@]}"; do
        tstate="${state[t]}"
        (( _logColor )) && {
            case $tstate in
                up)     tstatecol="$bold$green"     ;;
                down)   tstatecol="$red"            ;;
                lag)    tstatecol="$bold$yellow"    ;;
                conn)   tstatecol="$green"          ;;
                error)  tstatecol="$bold$red"       ;;
                n/a)    tstatecol="$yellow"         ;;
            esac
            printf -v tstate '%s%-5s%s' "$tstatecol" "$tstate" "$reset"
        }

        printf "[%s:%s] [%s]%s\n" "$t" "$tstate" "${type[t]}" "${name[t]}"
    done
}
shutdown() {
    kill "${pid[@]}" 2>/dev/null
}


# Run loop
trap showStatus INFO
trap showStatus USR1
trap shutdown EXIT
while true; do

    # Manage our tunnels.
    for t in "${!urls[@]}"; do
        IFS=: read host port _ <<< "${urls[t]#*://}"
        schema=${urls[t]%%://*}
        case "$schema" in
            ssh) port=${port:-22} ;;
            http) port=${port:-80} ;;
            https) port=${port:-443} ;;
        esac

        # Can we get a response over the connection? -> up
        if [[ ${out[t]} ]] && {
            read -d ''
            for tries in {1..3}; do
                read -d '' -n 1 && break
                ! sleep 1
            done
        } < "${out[t]}"; then
            [[ ${state[t]} != up ]] && {
                state[t]=up
                inf 'Connection Up: %s' "${urls[t]}"
            }
            continue
        fi

        # No response received - Is the process alive? -> lag
        if kill -0 "${pid[t]}" 2>/dev/null; then
            [[ ${state[t]} != @(conn|lag) ]] && {
                state[t]=lag
                wrn 'Connection Lagging: %s' "${urls[t]}"
            }
            continue
        fi

        # Process disappeared. -> down
        [[ ${state[t]} != @(n/a|down|) ]] && {
            state[t]=down
            perr 'Connection Lost: %s' "${urls[t]}"
                wait "${pid[t]}" 2>/dev/null
            rrep '%d: %s' "$?" "$(< "${err[t]}")"
        }
        unset 'pid[t]'


        # No process, check service availability. -> unavailable
        if ! nc -z "$host" "$port" &>/dev/null; then
            [[ ${state[t]} != n/a ]] && {
                wrn 'Connection Unavailable: %s - %s:%d' "${urls[t]}" "$host" "$port"
                state[t]=n/a
            }
            continue
        fi

        # Service available, open a connection. -> connecting
        inf 'Connection Opening: %s' "${urls[t]}"
        out[t]=$logDir/tunmgrd.tun$t.out
        err[t]=$logDir/tunmgrd.tun$t.err

        arguments=()
        if [[ ${modifiers[t]} = *M* ]]; then
            arguments+=( -M )
        fi
        read -r -a cconfigs <<< "${configs[t]}"

        case "$schema" in
            ssh)
                for cconfig in "${cconfigs[@]}"; do
                    IFS=: read side ports <<< "$cconfig"
                    saddress=${ports%%->*}
                    daddress=${ports#*->}
                    IFS=: read shost sport <<< "$saddress"
                    IFS=: read dhost dport <<< "$daddress"
                    [[ $sport ]] || sport=$shost shost=localhost
                    [[ $dport ]] || dport=$dhost dhost=localhost
                    case $side in
                        LOCAL)  arguments+=( -L "$shost:$sport:$dhost:$dport" ) ;;
                        REMOTE) arguments+=( -R "$shost:$sport:$dhost:$dport" ) ;;
                        DYNAMIC) arguments+=( -D "$shost:$sport" ) ;;
                    esac
                done

                # Launch the SSH client which sets up the actual connection.
                eval "$(keychain --inherit any --quiet --quick --eval)"
                ssh -n >"${out[t]}" 2> >(tr -d '\r' > "${err[t]}") \
                    -o "BatchMode yes" \
                    -o "ExitOnForwardFailure yes" \
                    -o "ServerAliveCountMax 3" \
                    -o "ServerAliveInterval 5" \
                    -p "$port" \
                    "${arguments[@]}" "$host" 'while sleep 1; do printf .; done' &
                state[t]=conn pid[t]=$!
            ;;

            http*)
                curl -sSnfo - "$url" >"${out[t]}" 2>"${err[t]}" &
                state[t]=conn pid[t]=$!
            ;;

            *)
                unset 'out[t]' 'err[t]'
            ;;
        esac
    done

    sleep 1
done
