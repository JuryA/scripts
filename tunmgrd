#! /usr/bin/env bash
# ___________________________________________________________________________ #
#                                                                             #
#       TunMgrd -- A tunnel management daemon.                                #
#                                                                             #
#                                                                             #
#    Licensed under the Apache License, Version 2.0 (the "License");          #
#    you may not use this file except in compliance with the License.         #
#    You may obtain a copy of the License at                                  #
#                                                                             #
#        http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                             #
#    Unless required by applicable law or agreed to in writing, software      #
#    distributed under the License is distributed on an "AS IS" BASIS,        #
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#    See the License for the specific language governing permissions and      #
#    limitations under the License.                                           #
# ___________________________________________________________________________ #
#                                                                             #
#                                                                             #
# Copyright 2010, lhunath                                                     #
#   * http://www.lhunath.com                                                  #
#   * Maarten Billemont.                                                      #
#                                                                             #
source bashlib                                                                #


# Utilities
log() {
    # Log an event at a certain importance level ($1).  The event is expressed as a printf(1) format argument ($2) and arguments to the format ($3+).
    local exitcode=$? level=$1 supported=0 end=$'\n' type=msg info= format= args=()

    # Handle options.
    [[ $1 = -p ]] && {
        shift
        level=$1
        end='.. '
        type=startProgress
    }
    [[ $1 = -P ]] && {
        shift
        level=$1
        type=doneProgress
    }
    shift
    format=$1
    args=( "${@:2}" )

    # Level-specific settings.
    case $level in
        DBG)    (( supported = verbosity >= 3 ))
                color=$blue ;;
        INF)    (( supported = verbosity >= 2 ))
                color=$white ;;
        WRN)    (( supported = verbosity >= 1 ))
                color=$yellow ;;
        ERR)    (( supported = verbosity >= 0 ))
                color=$red ;;
        FTL)    (( supported = 1 ))
                color=$bold$red ;;
        *)
                log FTL "Log level %s does not exist" "$level"
                exit 1 ;;
    esac
    (( ! supported )) && return "$exitcode"

    # Generate the log message.
    date=$(date +"${_logDate:-%H:%M}")
    case $type in
        msg|startProgress)
            IFS= read -r -d '' cleanmsg < <(printf "[%s %-3s] $1$end" "$date" "$level" "${@:2}")
            if [[ -t 1 ]]; then
                #args=( "${args[@]/#/$bold}" ) args=( "${args[@]/%/$reset$color}" ) ## FIXME: Breaks non-%s format arguments.
                IFS= read -r -d '' msg < <(printf "[%s %-3s] $color$format$reset$end" "$date" "$level" "${args[@]}")
            else
                msg=$cleanmsg
            fi
        ;;

        doneProgress)
            case $exitcode in
                0)  info=${2:+$(printf " ($2)" "${@:3}")}
                    IFS= read -r -d '' cleanmsg < <(printf "done%s.\n" "$info")
                    if [[ -t 1 ]]; then
                        IFS= read -r -d '' msg < <(printf "${green}${bold}done${reset}%s.\n" "$info")
                    else
                        msg=$cleanmsg
                    fi
                ;;

                *)  info=${2:+$(printf ": $2" "${@:3}")}
                    IFS= read -r -d '' cleanmsg < <(printf "error(%d%s).\n" "$exitcode" "$info")
                    if [[ -t 1 ]]; then
                        IFS= read -r -d '' msg < <(printf "${red}error${reset}(${bold}${red}%d${reset}%s).\n" "$exitcode" "$info")
                    else
                        msg=$cleanmsg
                    fi
                ;;
            esac
        ;;
    esac


    # Output the log message.
    printf '%s' "$msg"
    [[ $_logFile && ! -e $_logFile ]] && touch "$_logFile"
    [[ -w $_logFile ]] \
        && printf '%s' "$cleanmsg" >> "$_logFile"

    return $exitcode
}
dbg() { log DBG "$@"; }
inf() { log INF "$@"; }
wrn() { log WRN "$@"; }
err() { log ERR "$@"; }
ftl() { log FTL "$@"; }
plog() { log -p "$@"; }
golp() { log -P "$@" "$golp"; }
pdbg() { plog DBG "$@"; }
pinf() { plog INF "$@"; }
pwrn() { plog WRN "$@"; }
perr() { plog ERR "$@"; }
pftl() { plog FTL "$@"; }
gbdp() { golp=$gbdp golp DBG "$@"; }
finp() { golp=$finp golp INF "$@"; }
nrwp() { golp=$nrwp golp WRN "$@"; }
rrep() { golp=$rrep golp ERR "$@"; }
ltfp() { golp=$ltfp golp FTL "$@"; }
loadConfig() {
    # Load and parse the tunnel configuration file ($1).
    local t=-1 ti tf= tfi=-1 tfv oldpipe=$pipe fieldTypes=( type name host lforwards rforwards rcmd opts )

    # Initialize.
    cd
    TMPDIR=${TMPDIR:-/tmp} TMPDIR=${TMPDIR%/}
    verbosity=2 logDir= pipe= tunnels=()
    source "$1"
    : ${logDir:=$TMPDIR}
    : ${pipe:=$TMPDIR/tunmgrd.pipe}
    _logFile=$logDir/tunmgrd.log

    # t     Tunnel index.
    # ti    Index in tunnels array.
    # tf    Type of field ti refers to.
    # tfi   Index in the field types array ti refers to.
    # tfv   Value of the field in tunnels array at position ti.
    for ((ti = 0; ti < ${#tunnels[@]}; ++ti)); do

        # Step the field.
        tfv=${tunnels[ti]}
        [[ $tfv = - ]] && tfv=
        if [[ $tf != opts ]] || (( ${#tfv} == 1 )); then
            (( tfi = ( tfi + 1 ) % ${#fieldTypes[@]} ))
        fi
        tf=${fieldTypes[tfi]}
        [[ $tf = type ]] && (( ++t ))

        # Parse in tunnel data
        case $tf in
            type)       type[t]=$tfv                                        # TODO
                        clearOpts "$t"                                  ;;
            name)       name[t]=${tfv:-Tunnel $t}                       ;;
            host)       host[t]=${tfv:-localhost}                       ;;
            lforwards)  lforwards[t]=$tfv                               ;;
            rforwards)  rforwards[t]=$tfv                               ;;
            rcmd)       rcmd[t]=${tfv:-read}                            ;;
            opts)       optsi=( $(getOptIndexes "$t") )
                        setOpt "$t" "${#optsi[@]}" "$tfv"   ;;
        esac

    done
    showConfig

    if [[ $pipe != $oldpipe ]]; then
        kill "$CLIENT_PID" 2>/dev/null

        if [[ $pipe ]]; then

            # Prime the pipe
            rm -f "$pipe"
            mkfifo "$pipe"
            > "$pipe" &

            # Start the coprocess that will serve the pipe.
            {
                # TODO: Update CLIENT's state info when it changes in the main script.
                coproc CLIENT {
                    sleep 1
                    while true; do
                        while read -r 2>/dev/null && [[ $REPLY ]] 2>/dev/null; do
                            case $REPLY in
                                config) showConfig ;;
                                status) showStatus ;;
                                *)      err 'No such command: "%s".' "$REPLY" ;;
                            esac
                        done < "$pipe"
                    done

                    # Sleep for a moment before starting the next iteration.
                    if [[ -t 0 ]]; then
                        while read -s -n1 -t1; do
                            showStatus
                        done
                    else
                        sleep 1
                    fi
                } <&3 >&4
            } 3<&0 4>&1
        fi
    fi
}
showConfig() {
    # Output a brief description of the current configuration.
    local t

    inf "Global configuration:"
    inf '\t- PID:           %d' "$$"
    inf '\t- Logging to:    %s' "$logDir"
    inf '\t- Listening to:  %s' "$pipe"
    inf
    inf "Tunnels:"
    for t in "${!name[@]}"; do
        inf '\t- [%s]%s (%s)' "${type[t]}" "${name[t]}" "${host[t]}"
    done
}
showStatus() {
    # Output a status report on our tunnels.
    local tstate tstatecol= t

    printf '%s\n' ---
    for t in "${!name[@]}"; do
        tstate="${state[t]}"
        [[ -t 1 ]] && {
            case $tstate in
                up)     tstatecol="$bold$green"     ;;
                down)   tstatecol="$red"            ;;
                lag)    tstatecol="$bold$yellow"    ;;
                conn)   tstatecol="$green"          ;;
                error)  tstatecol="$bold$red"       ;;
                n/a)    tstatecol="$yellow"         ;;
            esac
            printf -v tstate '%s%-5s%s' "$tstatecol" "$tstate" "$reset"
        }

        printf "[%s:%s] [%s]%s\n" "$t" "$tstate" "${type[t]}" "${name[t]}"
    done
}
getOptIndexes() {
    # Outputs a whitespace delimited string of indexes of command arguments for the given tunnel index ($1) that have an argument value set.

    printf '%s' "${optsis[$1]}"
}
findOpt() {
    # Outputs the value of a command argument for the given tunnel index ($1) at the given argument index ($2)
    local optValueIndex= opti

    # Find the argument.
    for opti in ${optsis[$1]}; do
        [[ $opti = $2.* ]] && { optValueIndex=${opti#*.}; break; }
    done

    printf '%s' "$optValueIndex"
}
getOpt() {
    # Outputs the value of a command argument for the given tunnel index ($1) at the given argument index ($2)

    printf '%s' "${optsisValues[$(findOpt "$1" "$2")]}"
}
setOpt() {
    # Sets the value ($3) of a command argument for the given tunnel index ($1) at the given argument index ($2)
    local optValueIndex=$(findOpt "$1" "$2")

    # Special condition: If no options are set for this tunnel index and argument value is empty, assume user wants no options and skip this.
    [[ ! ${optsis[$1]} && ! $3 ]] && return

    # Make sure the argument index is mentioned in the list of known argument indexes.
    [[ ! $optValueIndex ]] && { optValueIndex=${#optsisValues[@]} optsis[$1]+=" $2.$optValueIndex"; }

    # Remember the value at this argument index.
    optsisValues[optValueIndex]=$3
}
clearOpts() {
    # Forgets any command arguments for the given tunnel index ($1)
    local opti

    for opti in ${optsis[$1]}; do
        # Must not unset this, setOpt relies on the array not being sparse.
        optsisValues[${opti#*.}]=
    done
    unset "optsis[$1]"
}
getMonitorPort() {
    # Outputs the tunnel test port of the tunnel with the given tunnel index ($1)

    printf '%05d' "$(( 13000 + $1 ))"
}
getHost() {
    # Outputs the hostname part from the given host string ($1)
    local host=$1

    host=${host%:*}; host=${host#*@}
    printf '%s' "$host"
}
getPort() {
    # Outputs the port of sshd(8) to which the tunnel to the given host ($1) will connect
    local port=22

    [[ $1 = *:* ]] && port=${1##*:}
    printf '%s' "$port"
}
isAvailable() {
    # Succeeds when an sshd(8) on the given host ($1) is accepting connections
    
    #if exists nmap; then
    #    [[ $(nmap -oG - -p "$(tport "$1")" "$(thost "$1")" 2>/dev/null | awk -F'[ /]' '/^[^#]/ {print $5}') = open ]]
    #else
        nc -z "$(getHost "$1")" "$(getPort "$1")" >/dev/null 2>&1
    #fi
}
isAlive() {
    # Succeeds when the tunnel with the given tunnel index ($1) is up and responds

    [[ $(nc -w 1 localhost "$(getMonitorPort "$1")" <<< '') = SSH-* ]]
}
shutdown() {
    # Exit handler.
    local t

    # Shut down any tunnels we brought up.
    for t in "${!pid[@]}"; do
        pinf 'Shutting down "%s" (%d)' "${name[t]}" "${pid[t]}"
            finp=$(kill "${pid[t]}" 2>&1)
            #while kill -0 "${pid[t]}" 2>/dev/null && sleep .5
            #do :; done

            #! kill -0 "${pid[t]}" 2>/dev/null
        finp
    done
}


# Configuration
loadConfig "${1:-"$HOME/.tunmgrd.conf"}"


# Run loop
trap loadConfig HUP
trap showStatus USR1
trap shutdown EXIT
while true; do

    # Manage our tunnels.
    for t in "${!name[@]}"; do

        # Check the tunnel state, skip tunnel if alive or ssh hasn't given up yet
        if [[ ${state[t]} = @(|up|lag) ]]; then

            if [[ ${type[t]} = l ]]; then
                # Local script.

                # Is the process alive?
                if kill -0 "${pid[t]}" 2>/dev/null; then
                    state[t]=up
                    continue
                fi

            else
                # Normal connection.

                # Can we get a response over the connection?
                if isAlive "$t"; then
                    state[t]=up
                    continue
                fi

                # Is the process alive?
                if kill -0 "${pid[t]}" 2>/dev/null; then
                    state[t]=lag
                    continue
                fi
            fi

            # Connection unavailable and no live ssh client for it.
            [[ ${state[t]} ]] && \
                wrn 'Tunnel "%s" disappeared.' "${name[t]}"
            unset "pid[t]"
            state[t]=down
        fi


        # Open the tunnel
        if [[ ${type[t]} = l ]]; then
            # Local script.

            pinf 'Bringing up "%s"' "${name[t]}"

                # Build an array for all the dynamic arguments to add to the process' command line.
                arguments=()
                for opti in $(getOptIndexes "$t"); do
                    arguments+=( "$(getOpt "$t" "$opti")" )
                done

                # Launch the local command.
                err[t]=$logDir/tunmgrd.tun$t.log
                >"${err[t]}" 2>&1           \
                name=${name[t]}             \
                host=${host[t]}             \
                lforwards=${lforwards[t]}   \
                rforwards=${rforwards[t]}   \
                bash -c "${rcmd[t]}" "tun$t" "${arguments[@]}" &
                state[t]=conn pid[t]=$!

                # Give it some time to set up and check whether it died or not.
                sleep 1
                kill -0 "${pid[t]}" 2>/dev/null && state[t]=up

            finp "${pid[t]}" || {
                state[t]=error
                err '%s' "$(<"${err[t]}")"
            }

        elif isAvailable "${host[t]}"; then
            # Available normal connection.

            pinf 'Bringing up "%s"' "${name[t]}"

                # Build an array for all the dynamic arguments to add to the ssh(1) command.
                read -r -a localForwards <<< "${lforwards[t]}"
                read -r -a remoteForwards <<< "${rforwards[t]}"
                arguments=()
                for lforward in "${localForwards[@]}"; do
                    arguments+=( -L "$lforward" )
                done
                for rforward in "${remoteForwards[@]}"; do
                    arguments+=( -R "$rforward" )
                done
                for opti in $(getOptIndexes "$t"); do
                    arguments+=( "$(getOpt "$t" "$opti")" )
                done

                # Launch the SSH client which sets up the actual connection.
                err[t]=$logDir/tunmgrd.tun$t.log
                ssh -ttn >"${err[t]}" 2>&1 \
                    -o "BatchMode yes" \
                    -o "ExitOnForwardFailure yes" \
                    -o "ServerAliveCountMax 3" \
                    -o "ServerAliveInterval 5" \
                    -L "$(getMonitorPort "$t"):localhost:$(getPort "${host[t]}")" \
                    "${arguments[@]}" "${host[t]}" "${rcmd[t]}" &
                state[t]=conn pid[t]=$!

                # Wait for the connection to become alive.
                for i in {0..10}; do
                    isAlive "$t" && { state[t]=up; break; }
                    kill -0 "${pid[t]}" 2>/dev/null || break
                    sleep .5 || break
                done
                [[ ${state[t]} = up ]]

            finp "${pid[t]}" || {
                state[t]=error
                err '%s' "$(<"${err[t]}")"
            }

        elif [[ ${state[t]} != n/a ]]; then
            # Normal connection not yet unavailable.

            wrn 'Connection to "%s" is unavailable.' "${name[t]}"
            state[t]=n/a
        fi

    done

    # Sleep for a moment before starting the next iteration.
    sleep 1

done
