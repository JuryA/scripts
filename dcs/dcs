#!/usr/bin/env bash
source bashlib
_logAttributes=$under


# Utilities.
maxargs() {
    if [[ ${@: -1} == -- ]]; then
        xargs -0 "${@:1:$#-1}"
    else
        "$@"
    fi
}
gitg() {
    [[ -e "$dcs/global.git" ]] || ftl 'Missing global DCS repository at %s' "$dcs" || exit
    (( ! $# )) && return

    GIT_DIR="$dcs/global.git" \
    GIT_WORK_TREE="$workdir" \
    maxargs git "$@"
}
gitl() {
    [[ -e "$dcs/local.git" ]] || ftl 'Missing local DCS repository at %s' "$dcs" || exit
    (( ! $# )) && return

    GIT_DIR="$dcs/local.git" \
    GIT_ALTERNATE_OBJECT_DIRECTORIES="$dcs/global.git/objects" \
    GIT_WORK_TREE="$workdir" \
    maxargs git "$@"
}
repo_local() {
    repo_git=gitl repo_other_git=gitg repo_branch=$branch_local
}
repo_global() {
    repo_git=gitg repo_other_git=gitl repo_branch=$branch_global
}
rgit() {
    "$repo_git" "$@"
}
ogit() {
    "$repo_other_git" "$@"
}
rgithas() {
    rgit ls-files --error-unmatch "$@" >/dev/null 2>&1
}
ogithas() {
    ogit ls-files --error-unmatch "$@" >/dev/null 2>&1
}
updateRepos() {
    # Ensure both repos are available
    gitg && gitl

    # Ensure we're on the right branch
    if [[ $(gitg symbolic-ref --short HEAD) != $branch_global ]]; then
        gitg checkout -B "$branch_global"
    fi
    if [[ $(gitl symbolic-ref --short HEAD) != $branch_local ]]; then
        gitl checkout -B "$branch_local"
    fi

    # Ensure the ignores are up-to-date
    if [[ ! -e "$dcs/global.ignore" ]]; then
        echo "/.dcs.d/*.git"           >"$dcs/global.ignore"
        chmod 0600 "$dcs/global.ignore"
        gitg add "$dcs/global.ignore"
    fi
    ignored=$(cat "$dcs/global.ignore"  "$dcs/local.ignore"   2>/dev/null)
    printf '%s\n' "$ignored"           >"$dcs/local.git/info/exclude"
    printf '%s\n' "$ignored"           >"$dcs/global.git/info/exclude"
    if [[ ! -e "$dcs/local.ignore" ]]; then
        touch "$dcs/local.ignore"
        chmod 0600 "$dcs/local.ignore"
        gitl add "$dcs/local.ignore"
    fi
    while IFS= read -u3 -rd '' localfile; do
        # FIXME: Handle filenames with * ? and newlines in them.
        printf '/%s\n' "$localfile"
    done 3< <(gitl ls-files --full-name -z "$workdir") >>"$dcs/global.git/info/exclude"
}
exportStats() {
    perl -0ne '
        sub nameForUID {
            my $uid = shift, $name = $nameForUID{$uid};
            if (! defined $name) {
                $nameForUID{$uid} = $name = scalar getpwuid($uid)
            }

            return defined $name? $name: $uid;
        }
        sub nameForGID {
            my $gid = shift, $name = $nameForGID{$gid};
            if (! defined $name) {
                $nameForGID{$gid} = $name = scalar getgrgid($gid)
            }

            return defined $name? $name: $gid;
        }

        chomp;
        my (undef, undef, $mode, undef, $uid, $gid) = stat($_);
        printf "%04o\t%s\t%s\t%s\0", $mode & 07777, nameForUID($uid), nameForGID($gid), $_;'
}
importStats() {
    while IFS=$'\t' read -rd '' mode user group rest; do
        IFS=$'\t' read -rd '' -a rest <<< "$rest"
        file=${rest[@]: -1}
        chmod -hvv "$mode" "$file"
        chown -h "$user:$group" "$file" || chown -h ":$group" "$file"
    done 2>/dev/null
}


# Initialize our working directory.
workdir=$(
    default=$PWD
    until [[ -e .dcs.d || $PWD = / ]]; do cd ..; done
    [[ -e .dcs.d ]] && echo "$PWD" || echo "$default"
)
dcs=$workdir/.dcs.d
branch_global=global/master
branch_local=local/${HOSTNAME%%.*}


# Run dcs action.
action=${1:-help}; shift
case $action in
    h|help)
        printf 'Usage: dcs action ...\n\n'
        printf 'DCS is the Document Control System.\n'
        printf 'It tracks documents using a global repository overlayed by a local.\n\n'
        printf 'Actions:\n'
        printf '    %si|init%s\n' "$under" "$reset"
        printf '        Initialize a new dcs repository in the current working directory.\n\n'
        printf '    %signore%s %s-p%s [files...]\n' "$under" "$reset" "$under" "$reset"
        printf '        Ignore documents that match a pattern.\n'
        printf '        If no patterns are given, opens the global ignore file in your editor.\n'
        printf '            %s-p%s      Treat the arguments as git ignore patterns instead.\n\n' "$under" "$reset"
        printf '    %sst|status%s [files...]\n' "$under" "$reset"
        printf '        Show the repository status of the tracked and untracked documents.\n\n'
        printf '    %ssize%s %s-h%s [files...]\n' "$under" "$reset" "$under" "$reset"
        printf '        Show the size of tracked files.\n'
        printf '            %s-h%s      Show human-readable sizes using SI units.\n\n' "$under" "$reset"
        printf '    %ss|stage%s [files...]\n' "$under" "$reset"
        printf '        Interactively stage untracked documents to the global or local repository.\n\n'
        printf '    %su|unstage%s files...\n' "$under" "$reset"
        printf '        Remove tracked documents from the dcs repository.\n'
        printf '        The documents themselves are not deleted.\n\n'
        printf '    %sg|global|l|local%s [files...]\n' "$under" "$reset"
        printf '        Stage the documents to the global or local repository.\n\n'
        printf '    %sG|globalize|L|localize%s [files...]\n' "$under" "$reset"
        printf '        Move the documents from the global to the local repository or vice-versa.\n\n'
        printf '    %sd|down|pull%s\n' "$under" "$reset"
        printf '        Download updates from the remote repository.\n\n'
        printf '    %su|up|push%s\n' "$under" "$reset"
        printf '        Upload changes to the remote repository.\n\n'
        printf '    %sr|remote%s [url]\n' "$under" "$reset"
        printf '        Set or change the URL to the remote repository.\n\n'
        printf '    %sgitg|gitl%s [git command]\n' "$under" "$reset"
        printf '        Run the git command in the global or local repository.\n\n'
        ;;

    i|init)
        workdir=$PWD
        dcs=$workdir/.dcs.d
        if [[ ! -e "$dcs" ]]; then
            [[ $(ask -c Ny 'Initialize DCS in %s?' "$workdir") = y ]] || exit
            mkdir -p "$dcs"
        fi
        if [[ ! -e "$dcs/global.git" ]]; then
            git init --shared=0600 --bare "$dcs/global.git"
            echo "ref: refs/heads/$branch_global" > "$dcs/global.git/HEAD"
        fi
        if [[ ! -e "$dcs/local.git" ]]; then
            git init --shared=0600 --bare "$dcs/local.git"
            echo "ref: refs/heads/$branch_local" > "$dcs/local.git/HEAD"
        fi
        updateRepos
        ;;

    ignore)
        updateRepos
        mode=file
        [[ $1 = -p ]] && mode=pattern && shift

        if (( $# )); then
            case $mode in
                pattern) printf '%s\n' "$@" ;;
                file) printf '/%s\n' "$(gitg ls-files --exclude-standard --full-name --directory --no-empty-directory -o "${@/%\//}")" ;;
            esac >> "$dcs/global.ignore"
        else
            "${EDITOR:-vi}" "$dcs/global.ignore"
        fi
        ;;

    st|status)
        [[ $1 = -a ]] && all=1 && shift
        updateRepos

        inf '%s:' "$branch_global"
        if (( all )); then
            gitg ls-files "$@"
        else
            gitg status -s "$@"
        fi

        inf '%s:' "$branch_local"
        if (( all )); then
            gitl ls-files "$@"
        else
            gitl status -s --untracked=no "$@"
        fi
        ;;

    size)
        format=bytes
        [[ $1 = -h ]] && format=human && shift

        while IFS= read -u3 -rd '' file; do
            (( size=$({ wc -c < "$file" || echo 0; } 2>/dev/null), total+=size ))

            case $format in
                bytes) printf '%10d %s\n' "$size" "$file" ;;
                human) printf '%4sB %s\n' "$(si "$size")" "$file" ;;
            esac
        done 3< <(gitg ls-files --exclude-standard -z "$@")

        case $format in
            bytes) printf '%10d total\n' "$total" ;;
            human) printf '%4sB total\n' "$(si "$total")" ;;
        esac
        ;;

    s|stage)
        stageFiles() {
            local f file files=() size siSize index count countSuffix stageAction
            declare -A fileSize

            pinf 'Interactively staging'
            while IFS= read -u3 -rd '' file; do
                kB=$(gitg ls-files --exclude-standard -o -z "$file" | xargs -0 du -xk | awk '{t+=$1}END{print t}')
                siSize=$(si "$((kB * 1000))")B
                fileSize["$file"]=$siSize
                for (( index = 1000000000000 - kB;; ++index )); do
                    [[ -z ${files[index]} ]] && files[index]=$file && break
                done
                uinf '%s (%s)' "$file" "$siSize"
            done 3< <(gitg ls-files --exclude-standard --directory --no-empty-directory -o -z "$@")
            files=( "${files[@]}" )
            fnip
            for file in "${files[@]}"; do
                printf '[%5s] %s\n' "${fileSize[$file]}" "$file"
            done

            for f in "${!files[@]}"; do
                file=${files[f]}
                while true; do
                    count=$(gitg ls-files --exclude-standard --directory --no-empty-directory -o "$file" | wc -l)
                    (( count == 1 )) && countSuffix= || countSuffix=s
                    stageAction=$(ask -c gliSevx '%s [%d/%d, %s, %d %s] - stage %slobal, %socal, %sgnore, %skip, %snter, %siew, e%sit?' \
                                    "$file" "$((f+1))" "${#files[@]}" "${fileSize[$file]}" "$count" "file$countSuffix" g l i s e v x)
                    case $stageAction in
                        g) gitg add "$file" && break ;;
                        l) gitl add "$file" && break ;;
                        i) { printf /; gitg ls-files --full-name --directory -o "${file%/}"; } >> "$dcs/global.ignore" && break ;;
                        S) break ;;
                        e) [[ -d "$file" ]] && stageFiles "$file" && break ;;
                        x) return 1 ;;
                        v) if hash view 2>/dev/null; then
                                view "$file"
                           else
                                "${PAGER:-less}" "$file"
                           fi ;;
                    esac
                done
            done
        }

        updateRepos
        stageFiles "$@"
        ;;

    u|unstage)
        updateRepos

        while IFS= read -u3 -rd ''; do
            gitg rm --cached "$REPLY"
        done 3< <(gitg ls-files -z "$@")
        while IFS= read -u3 -rd ''; do
            gitl rm --cached "$REPLY"
        done 3< <(gitl ls-files -z "$@")
        ;;

    g|global|l|local|G|globalize|L|localize)
        updateRepos
        repo_global
        [[ $action = [lL]* ]] && repo_local
        [[ $action = [GL] || $action = *ize ]] && move=1 || move=0

        files=()
        while IFS= read -u3 -rd ''; do
            if (( move )) || ! ogithas "$REPLY"; then
                files+=( "$REPLY" )
            fi
        done 3< <(
            if (( move )); then
                ogit ls-files --exclude-standard -z "$@"
            else
                rgit ls-files --exclude-standard -o -z "$@"
            fi
        )
        (( ${#files[@]} )) || ftl 'No files eligible.' || exit

        if (( move )); then
            inf 'Moving to %s:' "$repo_branch"
            printf '%s\n' "${files[@]}"
            printf '%s\0' "${files[@]}" | ogit rm --cached -q --
            updateRepos
        else
            inf 'Adding to %s:' "$repo_branch"
            printf '%s\n' "${files[@]}"
        fi

        printf '%s\0' "${files[@]}" | rgit add --
        ;;

    d|down|pull)
        updateRepos

        if [[ $(gitg remote show) = origin ]]; then
            inf 'Pulling %s...' "$branch_global"
            gitg fetch origin "$branch_global"
            gitg reset origin/"$branch_global" && gitg merge origin/"$branch_global"
        else
            gitg reset --merge "$branch_global"
        fi
        if [[ $(gitl remote show) = origin ]]; then
            inf 'Pulling %s...' "$branch_local"
            gitl fetch origin "$branch_local"
            gitl reset origin/"$branch_local" && gitl merge origin/"$branch_local"
        else
            gitl reset --merge "$branch_local"
        fi

        updateRepos
        pushd "$workdir" >/dev/null || exit
        [[ -e "$dcs/global.stat" ]] && importStats < "$dcs/global.stat"
        [[ -e "$dcs/local.stat" ]]  && importStats < "$dcs/local.stat"
        popd >/dev/null
        ;;

    u|up|push)
        updateRepos

        pushd "$workdir" >/dev/null || exit
        [[ ! -e "$dcs/global.stat" ]] && touch "$dcs/global.stat" && chmod 0600 "$dcs/global.stat"
        [[ ! -e "$dcs/local.stat" ]] && touch "$dcs/local.stat" && chmod 0600 "$dcs/local.stat"

        gitg ls-files -z | exportStats > "$dcs/global.stat"
        gitg add "$dcs/global.stat"
        gitg commit -am "dcs global commit"

        gitl ls-files -z | exportStats > "$dcs/local.stat"
        gitl add "$dcs/local.stat"
        gitl commit -am "dcs local commit" --untracked-files=no
        popd >/dev/null

        if [[ $(gitg remote show) = origin ]]; then
            inf 'Pushing %s...' "$branch_global"
            gitg push origin "$branch_global"
        fi
        if [[ $(gitl remote show) = origin ]]; then
            inf 'Pushing %s...' "$branch_local"
            gitl push origin "$branch_local"
        fi
        ;;

    r|remote)
        updateRepos
        if [[ $1 = -l ]]; then
            repo_local
            shift

        elif [[ $1 = -g ]]; then
            repo_global
            shift

        else
            if [[ $(ask -c Gl 'Use this remote for the %slobal or %socal repository?' g l) = G ]]; then
                repo_global
            else
                repo_local
            fi
        fi

        if [[ $(rgit remote show) = origin ]]; then
            rgit remote set-url origin "$@"
        else
            rgit remote add origin "$@"
            rgit branch -u "$repo_branch" "origin/$repo_branch"
        fi
        ;;

    gitg)
        updateRepos
        gitg "$@"
        ;;

    gitl)
        updateRepos
        gitl "$@"
        ;;

    *)
        ftl 'Unrecognized action: %s' "$action"
        exit 1
        ;;
esac
